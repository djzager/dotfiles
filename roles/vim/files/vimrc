" Most helpful other configs I have taken from:
" https://github.com/LukeSmithxyz/voidrice
" https://github.com/wincent/wincent
" https://github.com/jessfraz/dotfiles
let mapleader = " "
let maplocalleader = "\\"

" Environment
	set undodir=$XDG_CACHE_HOME/vim/undo
	set directory=$XDG_CACHE_HOME/vim/swap
	set backupdir=$XDG_CACHE_HOME/vim/backup
	set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
	set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
	let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Plugins
	if empty(glob("$XDG_CONFIG_HOME/vim/autoload/plug.vim"))
		silent !mkdir -p "$XDG_CONFIG_HOME/vim/autoload"
		silent !curl https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim > "$XDG_CONFIG_HOME/vim/autoload/plug.vim"
		autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	endif

	call plug#begin("$XDG_CONFIG_HOME/vim/plugged")
		Plug 'autozimu/LanguageClient-neovim', {
				\ 'branch': 'next',
				\ 'do': 'bash install.sh',
		\ }
		Plug 'christoomey/vim-tmux-navigator'
		" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
		Plug 'junegunn/fzf'
		Plug 'junegunn/fzf.vim'
		Plug 'kopischke/vim-fetch'
		Plug 'tpope/vim-commentary'
	call plug#end()

" Basic
	set nocompatible                " Use Vim settings, rather than Vi settings (much better!).
	set ttyfast                     " Draw faster
	set number relativenumber       " Relative line numbers
	set wildmode=longest,list,full  " Command autocompletion
	syntax on                       " Syntax highlighting
	set showmatch                   " Highlight curlybraces!
	set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.
	set encoding=utf-8              " Use utf-8 when displaying
	set winwidth=120                " Minimum number of columns for current window
	set list listchars=tab:¬\       " Show hidden characters
	set tabstop=2 shiftwidth=2      " Handle <Tab> and indent
	set expandtab
	set splitright splitbelow       " New splits → New splits ↓
	set scrolloff=10                " Show a few lines of context around the cursor.
	set ignorecase                  " ignore case when searching
	set incsearch                   " search as we enter text
	set hlsearch                    " highlight matches

" Cursor
	let &t_SI = "\<Esc>[6 q"
	let &t_SR = "\<Esc>[4 q"
	let &t_EI = "\<Esc>[2 q"

" Folding
	set foldmethod=indent           " fold on indent level
	set foldignore=                 " don't ignore #
	set foldnestmax=10              " max depth 10
	set foldlevelstart=1            " starting fold level

" Copy/Paste
	set clipboard=unnamedplus
	" Copy whole file
	map <leader>a :%y+<CR>
	" Paste from system clipboard
	map <leader>p "+p
	map <leader>P "+P

	map <leader><leader> <c-^>

" Custom commands
	command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
	nnoremap <C-o> :Files<cr>
	nnoremap <C-f> :Rg<cr>

" Autocommand
	if has("autocmd")
		" Enable file type detection.
		filetype plugin on

		" When editing a file, always jump to the last known cursor position.
		autocmd BufReadPost *
		\ if line("'\"") >= 1 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif

		autocmd BufRead,BufNewFile *.py.stub set filetype=python
		autocmd BufRead,BufNewFile *.pod,*.svc,*.app,*.yml set filetype=yaml
		autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby
		autocmd BufRead,BufNewFile *.zsh-theme set filetype=conf

		" Use relative numbering
		autocmd FocusLost * :set norelativenumber
		autocmd FocusGained * :set relativenumber
		autocmd InsertEnter * :set norelativenumber
		autocmd InsertLeave * :set relativenumber

		" Automatically delete all trailing whitespace on save.
		autocmd BufWritePre * %s/\s\+$//e

		" Disables automatic commenting on newline:
		autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

		" VIM
		autocmd FileType vim setlocal noexpandtab

		" Go
		autocmd FileType go setlocal noexpandtab
	endif

" LanguageServer
	let g:LanguageClient_useFloatingHover=1
	let g:LanguageClient_hoverPreview='Always'
	let g:LanguageClient_serverCommands = {
		\ 'go': ['~/go/bin/gopls'],
		\ }

function! s:Config()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    if &filetype == 'reason'
      " Format selection with gq.
      setlocal formatexpr=LanguageClient#textDocument_rangeFormatting_sync()

      " <Leader>f -- Format buffer.
      nnoremap <buffer> <silent> <Leader>f :call LanguageClient_textDocument_formatting()<CR>
    endif

    " gd -- go to definition
    nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>

    " K -- lookup keyword
    nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<CR>

    if exists('+signcolumn')
      setlocal signcolumn=yes
    endif
  endif
endfunction

function! s:Bind()
  nnoremap <buffer> <silent> K :call LanguageClient#closeFloatingHover()<CR>
  nnoremap <buffer> <silent> <Esc> :call LanguageClient#closeFloatingHover()<CR>
endfunction

augroup WincentLanguageClientAutocmds
  autocmd!
  autocmd FileType * call s:Config()

  if has('nvim') && exists('*nvim_open_win')
    " Can use floating window.
    autocmd BufEnter __LanguageClient__ call s:Bind()
  endif
augroup END
