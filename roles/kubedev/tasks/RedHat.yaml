---

- name: Install golangci-lint
  vars:
    golangci_download_dir: "{{ xdg_data_home }}/golangci-lint-{{ golangci_version }}-linux-amd64"
    golangci_final: "{{ xdg_data_home }}/bin/golangci-lint"
  block:
    - name: Download golangci-lint release
      unarchive:
        src: "https://github.com/golangci/golangci-lint/releases/download/v{{ golangci_version }}/golangci-lint-{{ golangci_version }}-linux-amd64.tar.gz"
        dest: "{{ xdg_data_home }}"
        copy: no

    - name: Move golangci-lint into $XDG_DATA_HOME/bin
      command: "mv {{ golangci_download_dir }}/golangci-lint {{ golangci_final }}"

    - name: Remove golangci-lint directory
      file:
        path: "{{ golangci_download_dir }}"
        state: absent

- name: Install kubectl
  get_url:
    url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/{{ item }}"
    dest: "{{ xdg_data_home }}/bin/{{ item }}"
    force: yes
  with_items:
    - "kubectl"
    - "kubectl-convert"

# - name: Install kubebuilder
#   vars:
#     kubebuilder_archive_dir: "kubebuilder_{{ kubebuilder_version }}_linux_amd64"
#     kubebuilder_dir: "{{ xdg_data_home }}/kubebuilder"
#   block:
#     - name: Create temp directory for kubebuilder archive
#       tempfile:
#         state: directory
#       register: kubebuilder

#     - name: Get kubebuilder archive
#       get_url:
#         url: "https://go.kubebuilder.io/dl/{{ kubebuilder_version }}/linux/amd64"
#         dest: "{{ kubebuilder.path }}"
#       register: kubebuilder_tar

#     - name: Unarchive kubebuilder
#       unarchive:
#         src: "{{ kubebuilder_tar.dest }}"
#         dest: "{{ kubebuilder.path }}"

#     - name: Remove existing kubebuilder bin directory
#       file:
#         path: "{{ kubebuilder_dir }}"
#         state: absent

#     - name: Move kubebuilder into place
#       command: "mv -f {{ kubebuilder.path }}/{{ kubebuilder_archive_dir }} {{ kubebuilder_dir }}"

#     - name: Remove temp directory
#       file:
#         path: "{{ kubebuilder.path }}"
#         state: absent

- name: Install operator-sdk
  block:
  - name: Get the operator-sdk
    get_url:
      url: "https://github.com/operator-framework/operator-sdk/releases/download/v{{ operator_sdk_version }}/operator-sdk_linux_amd64"
      dest: "{{ xdg_data_home }}/bin/operator-sdk"
      mode: "u+x"

# - name: Install kustomize
#   block:
#     - name: Create temp directory for kustomize archive
#       tempfile:
#         state: directory
#       register: kustomize

#     - uri:
#         url: https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest
#         return_content: true
#       register: json_reponse

#     - get_url:
#         url: "{{ json_reponse.json.tarball_url }}"
#         dest: "{{ kustomize.path }}/kustomize-latest.tar.gz"
#       register: kustomize_tar

#     - name: Unarchive kustomize
#       unarchive:
#         src: "{{ kustomize_tar.dest }}"
#         dest: "{{ kustomize.path }}"

#     # - name: Move kustomize into place
#     #   command: "mv -f {{ kustomize.path }}/kustomize-latest {{ kubebuilder_dir }}"

- name: Install krew
  shell: |
    export KREW_ROOT={{ xdg_data_home }}/krew
    set -x; cd "$(mktemp -d)" &&
    OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
    ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
    KREW="krew-${OS}_${ARCH}" &&
    curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
    tar zxvf "${KREW}.tar.gz" &&
    ./"${KREW}" install krew

- name: Link configuration files into zdotdir
  file:
    src: "{{ item }}"
    dest: "{{ zdotdir }}/{{ item | basename }}"
    force: yes
    state: link
  with_fileglob:
    - "{{ role_path }}/files/*.zsh"
